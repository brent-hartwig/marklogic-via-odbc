import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "com.marklogic.ml-gradle" version "4.1.0"
}
ext {
    // Keep in sync with ./data/dbgen/*.tbl files.
    dbgenConfig = [
        "customer": "CUSTKEY|NAME|ADDRESS|NATIONKEY|PHONE|ACCTBAL|MKTSEGMENT|COMMENT",
        "lineitem": "ORDERKEY|PARTKEY|SUPPKEY|LINENUMBER|QUANTITY|EXTENDEDPRICE|DISCOUNT|TAX|RETURNFLAG|LINESTATUS|SHIPDATE|COMMITDATE|RECEIPTDATE|SHIPINSTRUCT|SHIPMODE|COMMENT",
        "nation": "NATIONKEY|NAME|REGIONKEY|COMMENT",
        "orders": "ORDERKEY|CUSTKEY|ORDERSTATUS|TOTALPRICE|ORDERDATE|ORDERPRIORITY|CLERK|SHIPPRIORITY|COMMENT",
        "part": "PARTKEY|NAME|MFGR|BRAND|TYPE|SIZE|CONTAINER|RETAILPRICE|COMMENT",
        "partsupp": "PARTKEY|SUPPKEY|AVAILQTY|SUPPLYCOST|COMMENT",
        "region": "REGIONKEY|NAME|COMMENT",
        "supplier": "SUPPKEY|NAME|ADDRESS|NATIONKEY|PHONE|ACCTBAL|COMMENT"
    ]
    dbgenBuildPath = './build/data/dbgen'
    dbgenFileExt = 'tbl'
    dbgenDeployGroup = project.property('mlAppName') + '-dbgen'
}

repositories {
    jcenter()
    maven {url 'http://developer.marklogic.com/maven2/'}
}

configurations {
    mlcp
    corb
}

dependencies {
    mlcp "com.marklogic:mlcp:10.0.2"
    mlcp "org.apache.commons:commons-csv:1.5.1-marklogic"
    mlcp files("lib")
}

// Copy the sample data generated by dbgen to the build directory, such that we can then add header rows.
task copyData(type: Copy, group: dbgenDeployGroup, description: "Copies this project's dbgen data to the build directory.") {
    from './data/dbgen'
    into dbgenBuildPath
    doFirst {
        println "Copying data..."
    }
}

// Adds a header row to a single sample data file generated by dbgen.
void addHeaderRow(name, headers) {
    println "Adding header row to ${dbgenBuildPath}/${name}.${dbgenFileExt}..."
    def tempFileName = 'combined.txt'
    def finalFileName = "${name}.${dbgenFileExt}"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        exec {
            workingDir dbgenBuildPath
            // replaceAll() needed for pipe-delimited files.
            commandLine 'cmd', '/c', "echo ${headers.replaceAll("[|]", "^|")} > ${tempFileName}"
        }
        exec {
            workingDir dbgenBuildPath
            commandLine 'cmd', '/c', "copy ${tempFileName}+${finalFileName} ${tempFileName} > nul"
        }
        exec {
            workingDir dbgenBuildPath
            commandLine 'cmd', '/c', "move /Y ${tempFileName} ${finalFileName} > nul"
        }
    } else {
        exec {
            workingDir dbgenBuildPath
            commandLine "sed -i '1i ${headers}' ${finalFileName}"
        }
    }
}

// Define a pair of tasks per sample data file from dbgen.  One is to add a header row, and the other is to load into ML.
// Stack dependencies such that a) the first "addHeaderRowTo[TableName]" task depends on copyData and b) loadData
// depends on the last "load[TableName]" task.
def previousTask = tasks.copyData
dbgenConfig.each { name, headers ->
    def headerTask = tasks.create(name: "addHeaderRowTo${name.capitalize()}", group: dbgenDeployGroup, description: "Adds the header row to the dbgen '${name}' sample data.") {
        doLast {
            addHeaderRow(name, headers)
        }
    }
    println "${headerTask.name} depends on ${previousTask.name}"
    headerTask.dependsOn previousTask
    previousTask = headerTask

    def loadTask = tasks.create(name: "load${name.capitalize()}", type: com.marklogic.gradle.task.MlcpTask, group: dbgenDeployGroup, description: "Loads the dbgen '${name}' sample data into ML.") {
        host = project.property("mlHost")
        port = project.property("mlRestPort").toInteger()
        database = project.property("mlViaOdbcDbName")
        classpath = configurations.mlcp
        command = "IMPORT"
        input_file_type = "delimited_text"
        delimiter = "|"
        document_type = "json"
        input_file_path = "${dbgenBuildPath}/${name}.${dbgenFileExt}"
        transform_module = "/import/dbgen-import-utils.sjs"
        transform_function = "addWrapper"
        transform_param = name.toUpperCase()
        output_collections = "dbgen,${name}"
        output_permissions = "rest-reader,read,rest-writer,update"
        output_uri_replace = ".*data,''"
        output_uri_prefix = "/dbgen/${name}/${name}-"
        output_uri_suffix = ".json"
    }
    println "${loadTask.name} depends on ${previousTask.name}"
    loadTask.dependsOn previousTask
    previousTask = loadTask
}

// Load all dbgen sample data into ML via MLCP.
task loadData(group: dbgenDeployGroup, description: "Load all of this project's dbgen sample data into ML.")
println "loadData depends on ${previousTask.name}"
loadData.dependsOn previousTask
